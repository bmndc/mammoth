import Foundation

private let DecodeTable: [UInt32] = [
    0xFF, 0x44, 0xFF, 0x54, 0x53, 0x52, 0x48, 0xFF,
    0x4B, 0x4C, 0x46, 0x41, 0xFF, 0x3F, 0x3E, 0x45,
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
    0x08, 0x09, 0x40, 0xFF, 0x49, 0x42, 0x4A, 0x47,
    0x51, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A,
    0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32,
    0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A,
    0x3B, 0x3C, 0x3D, 0x4D, 0xFF, 0x4E, 0x43, 0xFF,
    0xFF, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,
    0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
    0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20,
    0x21, 0x22, 0x23, 0x4F, 0xFF, 0x50, 0xFF, 0xFF,
]

extension String {
    func decode85() -> Data {
        var data = Data()
        var block: UInt32 = 0
        var n = 0
        for c in utf8 {
            if c >= 32, c < 128, DecodeTable[Int(c - 32)] != 0xFF {
                let value = DecodeTable[Int(c - 32)]
                block = block * 85 + value
                n += 1
                if n == 5 {
                    data.append(UInt8(block >> 24))
                    data.append(UInt8((block >> 16) & 0xFF))
                    data.append(UInt8((block >> 8) & 0xFF))
                    data.append(UInt8(block & 0xFF))
                    block = 0
                    n = 0
                }
            }
        }

        if n >= 4 { data.append(UInt8((block >> 16) & 0xFF)) }
        if n >= 3 { data.append(UInt8((block >> 8) & 0xFF)) }
        if n >= 2 { data.append(UInt8(block & 0xFF)) }

        return data
    }
}
